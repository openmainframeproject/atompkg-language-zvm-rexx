
# Change summary
# - Wrote syntax rules based on Walter Church's internal set, then re-wrote
#   many of them based on:
#   z/VM 6.4 CMS Commands and Utilities Reference, NAMEFIND command, usage note 3

# After editing this file, CTL-SHIFT-F5 or C-S-P window:reload to update the active editor with the revised grammar.
# editor:log-cursor-scope to see which selectors (example: comment.block.rexx) the grammar applies at the cursor's location.

'scopeName': 'source.REXX'
'name': 'REXX'
# VMDT is used by the VM Dump Tool for files written in Rexx
'fileTypes': ['REXX','EXEC','EXEC2','VMDT']

'patterns': [
    # Comments are recursively defined (nesting allowed), so include a single
    # recursive rule instead of duplicating the parsing here and then a second
    # time (to handle nesting) in the repository
    { 'include': '#comment-rule' },
    { 'include': '#number-rule' },
    { 'include': '#label-rule' },
    { 'include': '#parenthesis-rule' },
    { 'include': '#single-quoted-string-rule' },
    { 'include': '#double-quoted-string-rule' },
    { 'include': '#address-keyword-instruction-rule' },
    { 'include': '#call-keyword-instruction-rule' },
    { 'include': '#signal-keyword-instruction-rule' },
    { 'include': '#signal-value-keyword-instruction-rule' },
    { 'include': '#numeric-digits-keyword-instruction-rule' },
    { 'include': '#numeric-form-keyword-instruction-rule' },
    { 'include': '#numeric-fuzz-keyword-instruction-rule' },
    { 'include': '#parse-keyword-instruction-rule' },
    { 'include': '#procedure-keyword-instruction-rule' },
    # More generic rules last
    { 'include': '#targeted-control-keyword-instruction-rule' },
    { 'include': '#do-end-rule' },
    { 'include': '#select-rule' },
    { 'include': '#simple-control-keyword-instruction-rule' },
    { 'include': '#simple-other-keyword-instruction-rule' },
    { 'include': '#special-variables-rule' },
    { 'include': '#functions-names-rule' },
    { 'include': '#variable-names-rule' }
]

'holding-area-patterns': [
    { # Arwe: looks like a sequence number ... why mapped to type?
      'match': '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\\n'
      'name': 'entity.name.type.rexx'
    },
    { # Rexx DO keyword instruction operands - 6.4
      'match': '\\b((?i)by|end|for|forever|to|until|while)\\b(\\s*)'
      'name': 'keyword.control.rexx'
    },
    { # Rexx SELECT keyword instruction operands - 6.4
      'match': '\\b((?i)end|otherwise|then)\\b(\\s*)'
      'name': 'keyword.control.rexx'
    },
]

'repository': {
    'number-rule': {
        # Arwe: note that Rexx numbers are more general, e.g. E notation/signs
        'match': '\\b(([0-9]+)(\\.[0-9]+)?)\\b'
        'name': 'constant.numeric.rexx'
    },
    'comment-rule': { # Comments, including nested comments
      # Comments are recursively defined (nesting allowed), so include a single
      # recursive rule instead of duplicating the parsing.
      'begin': '/\\*'
      'beginCaptures':
        '0':
          'name': 'punctuation.definition.comment.begin.rexx'
      'end': '\\*/'
      'endCaptures':
        '0':
          'name': 'punctuation.definition.comment.end.rexx'
      'name': 'comment.block.rexx'
      'patterns': [
          {
            'include': '#working-comment-rule'
          }
      ]
    },
    'label-rule': {
        # Handles only the simplest case: optional whitespace, symbol, optional whitespace, colon
        'match': '(\\*\\/)?\\s*[A-za-z0-9@₵#$.!?]+\\s*:'
        'name': 'entity.name.rexx'
    },
    'parenthesis-rule': {
      'begin': '\\('
      'beginCaptures':
          '0':
              'name': 'punctuation.definition.parens.begin.rexx'
      'end': '\\)'
      'endCaptures':
          '0':
              'name': 'punctuation.definition.parens.end.rexx'
    },
    'single-quoted-string-rule': {
      # No need to handle embedded escaped quotes as a special case.
      # Visually they look like two consecutive strings, and that's fine.
      'begin': '\''
      'beginCaptures':
          '0':
              'name': 'punctuation.definition.string.begin.rexx'
      'end': '\''
      'endCaptures':
          '0':
              'name': 'punctuation.definition.string.end.rexx'
      'name': 'string.quoted.single.rexx'
      'patterns': [
          { #PIPE
            'include': '#working-pipeline-rule'
            'name': 'support.function.rexx'
          },
          {
            'include': '#label-rule'
            'name': 'variable.parameter.rexx'
          }
      ]
    },
    'double-quoted-string-rule': {
      # No need to handle embedded escaped quotes as a special case.
      # Visually they look like two consecutive strings, and that's fine.
      'begin': '"'
      'beginCaptures':
          '0':
              'name': 'punctuation.definition.string.begin.rexx'
      'end': '"'
      'endCaptures':
          '0':
              'name': 'punctuation.definition.string.end.rexx'
      'name': 'string.quoted.single.rexx'
      'patterns': [
          { #PIPE
            'include': '#working-pipeline-rule'
            'name': 'support.function.rexx'
          },
          {
            'include': '#label-rule'
            'name': 'variable.parameter.rexx'
          }
      ]
    },
    'simple-other-keyword-instruction-rule': {
      'match': '\\b((?i)arg|drop|nop|options|pull|push|queue|say|trace|upper|lower|value|with|label)\\b'
      'name': 'keyword.other.rexx'
    },
    'simple-control-keyword-instruction-rule': {
      'match': '\\b((?i)call|do|end|exit|if|then|else|interpret|iterate|return|select|when|otherwise|to|by|for)\\b'
      'name': 'keyword.control.rexx'
    },
    'targeted-control-keyword-instruction-rule': {
      'match': '\\b((?i)call|iterate|leave|signal)(\\s+([A-za-z0-9@#₵$.!?]+))?\\b'
      'captures': {
        '1': { 'name': 'keyword.control.rexx'},
        '2': { 'name': 'entity.name.rexx'},
      }
    },
    'address-keyword-instruction-rule': {
      'match': '\\b((?i)address)\\s+((?i)value|cmsmixed|cms|command)?'
      'name': 'keyword.other.rexx'
    },
    'call-keyword-instruction-rule': {
      'match': '\\b((?i)call)\\s+((((?i)off)\\s+((?i)error|halt|failure|notready))|(((?i)on)\\s+((?i)error|halt|failure|notready)(\\s+((?i)name))?\\s+))'
      'captures':
        '0':
          'name': 'keyword.control.rexx'
        '9':
          'name': 'entity.name.rexx'
    },
    'signal-keyword-instruction-rule': {
      'match': '\\b((?i)signal)\\s+((((?i)off)\\s+((?i)error|halt|failure|notready|novalue|syntax))|(((?i)on)\\s+((?i)error|halt|failure|notready|novalue|syntax)(\\s+((?i)name))?\\s+))'
      'captures':
        '0':
          'name': 'keyword.control.rexx'
        '10':
          'name': 'entity.name.rexx'
    },
    'signal-value-keyword-instruction-rule': {
      'match': '\\b((?i)signal)(\\s+((?i)value))?\\b'
      'name': 'keyword.other.rexx'
    },
    'numeric-digits-keyword-instruction-rule': {
      'match': '\\b((?i)numeric)\\s+((?i)digits)\\b'
      'name': 'keyword.other.rexx'
    },
    'numeric-form-keyword-instruction-rule': {
      'match': '\\b((?i)numeric)\\s+((?i)form)(\\s+((?i)scientific|engineering|value))?\\b'
      'name': 'keyword.other.rexx'
    },
    'numeric-fuzz-keyword-instruction-rule': {
      'match': '\\b((?i)numeric)\\s+((?i)fuzz)\\b'
      'name': 'keyword.other.rexx'
    },
    'parse-keyword-instruction-rule': {
      'match': '\\b((?i)parse)(\\s+((?i)upper|lower|caseless))?\\s+((?i)arg|external|linein|numeric|pull|source|value|var|version)\\s+'
      'name': 'keyword.other.rexx'
    },
    'procedure-keyword-instruction-rule': {
      'match': '\\b((?i)procedure)(\\s+((?i)expose))?\\b'
      'name': 'keyword.other.rexx'
    },
    'special-variables-rule': {
      'match': '\\b((?i)rc|result|sigl)\\b'
      'name': 'support.variable.rexx'
    },
    # "name" followed by open-parenthesis with NO intervening whitespace is Rexx's definition of a function call
    'variable-names-rule': {
      'match': '\\b([A-za-z0-9@#₵$.!?]+)'
      'name': 'variable.other.rexx'
    },
    'functions-names-rule': {
      'match': '\\b([A-za-z0-9@#₵$.!?]+)(\\()'
      'captures':
        '1':
          'name': 'entity.name.function.rexx'
    },
    'do-end-rule': {
      'begin': '\\b((?i)do\\s+)((?i)forever\\s+)?((?i)(while|until))?([0-9]+)?'
      'beginCaptures':
        '1':
          'name': 'keyword.control.rexx'
        '2':
          'name': 'keyword.control.rexx'
        '4':
          'name': 'keyword.control.rexx'
        '5':
          'name': 'numeric.constant.rexx'
      'patterns': [
        { include = "$self" }
      ]
      'end': '\\b((?i)end)'
      'endCaptures':
        '0':
          'name': 'keyword.control.rexx'
    },
    'select-rule': {
      'begin': '((?i)select)'
      'beginCaptures':
        '0':
          'name': 'keyword.control.rexx'
      'patterns': [
        { include = "$self" }
      ]
      'end': '((?i)end)'
      'endCaptures':
        '0':
          'name': 'keyword.control.rexx'
    },
    'working-pipeline-rule': {
      # Just ORing them all together causes spurious matches, like 'not' in the middle of a string constant that's not a pipeline.
      # It does process most other cases roughly as expected, though.
      'match': '\\b((?i)PIPE(LINE)?|<|APPEND|CMD|DISKRAND|FILTERPAc|HLASMERR|MAXSTREA|OUTSIDE|READTO|SPECTUTO|STRNFIND|TRACKDEBl|VMC|ASATOMC|CMS|DISKSLOW|FIND|HOLE|MCTOASA|OUTSTORE
|RESOLVE|SPILL|STRNLOCAt|TRACKEXPa|VMCDATA|ASMCONT|COLLATE|DISKUPDAt|FITTING|HOSTBYADd|MDISKBLK|OVERlay|RETAB|SPLIT|STRNOTLOc|TRACKREAd|VMCFCLIE
n|ASMEXPANd|COMBINE|DROP|FLTPACKag|HOSTBYNAm|MDSKBACK|OVERSTR|REVERSE|SQL|STRTOLABe|TRACKSQUi|VMCFDATA|ASMFIND|COMMAND|DUPlicate|FMTFST|HOSTID|M
DSKBLK|PACK|REXX|SQLCODES|STRUCTRE|TRACKVERi|VMCFLISTe|>|ASMNFIND|COMMIT|ELASTIC|FRLABel|HOSTNAME|MDSKFAST|PAD|REXXCMD|SQLSELECt|STRUCTure|TRACK
WRIt|VMCLIENT|>>|ASMXPAND|CONFIGURe|EMSG|FROMLABel|HTTPSPLIt|MDSKRAND|PARCEL|REXXVARS|STACK|STRWHILEl|TRACKXPAn|VMCLISTEn|ASMXPND|CONFIGVA|ENBAS
E64|FROMTARGe|IEBCOPY|MDSKSLOW|PAUSE|RUNPIPE|STAGENUM|STSI|TRANSlate|WAITDEV|BEAT|CONSole|EOFBACK|FRTARGET|IF|MDSKUPDAt|PDSdirect|SCANNER|STARMO
N|SUBCOM|TRANSLIte|WARP|BEGOUTPU|COPY|EOFREPOR|FTP|IMMCMD|MEMBERs|PEEKTO|SCANRANG|STARMSG|SUBSTRing|TRFREAD|WARPLIST|BETWEEN|COUNT|ESCAPE|FULLSC
R|INSERT|MERGE|PICK|SCANSTRI|STARSYS|SUSPEND|TRUNCate|WHILELAB|BFS|CP|FANIN|FULLSCRQ|INSIDE|MESSAGE|PIPCMD|SCM|STATE|SYNChroni|UDP|WILDCARD|BFSD
IRect|CRC|FANINANY|FULLSCRS|INSTORE|MULTVERS|PIPDUMP|SEC2GREG|STATEW|SYNTAX|UNIQue|XAB|BFSEXecut|C14TO38|FANINTWO|GATE|IP2SOCKA|NFIND|PIPESTOP|S
ELECT|STEM|TAKE|UNPACK|XEDIT|ABBREV|BFSQuery|DAM|FANOUT|GATHER|ISPF|NINSIDE|PIPEVENT|SETRC|STFLe|TAPE|UNTAB|XEDITMSG|ACIGROUP|BFSREPlac|DATECNVT
|FANOUTWO|GETfiles|ISSUEMSG|NLOCATE|POLISH|SEVER|STGSELEC|TCPCKSUM|UPDATE|XLATE|ADDPIPE|BFSSTATe|DATECONVe|FBAREAD|GETRANGE|JEREMY|NOCOMMIT|PRED
SELec|SFSBACK|STORAGE|TCPCLIENt|URLDEBLOc|XMSG|ADDRDW|BFSXecute|DEAL|FBAWRITE|GREG2SEC|JOIN|NOEOFBACk|PREFACE|SFSDIRect|STRASMFin|TCPDATA|URLDEC
ODe|XPNDHI|ADDRSPACe|BLOCK|DEBLOCK|FBLOCK|HELP|JOINCONT|NOT|PREPEND|SFSRANDom|STRASMNFi|TCPLISTEn|URO|XRANGE|ADDSTREA|BROWSE|DELAY|FILEBACK|HFS|JUXTAPOSe|NOTEOFBAc|PRINTMC|SFSU
PDATe|STREAMNU|TERMinal|UTF|ZONE|ADRSPACE|BRW|DEVINFO|FILEDEScr|HFSDIRect|LDRTBLS|NOTFIND|PUNCH|SHORT|STREAMST|THREEWAY|VAR|3WAY|AFTFST|BUFFER|D
FSORT|FILEfast|HFSEXecut|LISTPDS|NOTINSIDe|QPDECODE|SNAKE|STRFIND|TIMEstamp|VARDROP|3270BFRA|AGGRC|BUILDSCR|DIAGE4|FILERAND|HFSQuery|LITERAL|NOT
LOCATe|QPENCODE|SOCKA2IP|STRFRLABe|TOKENISE|VARFETCH|3270ENC|AHELP|CALLPIPE|DIGEST|FILESLOW|HFSREPlac|Locate|NUCEXT|QSAM|SORT|STRFROMLa|TOKENIZE
|VARLOAD|3277BFRA|ALL|CASEI|DISKBACK|FILETOKen|HFSSTATe|LOOKUP|NUL|Query|SPACE|STRIP|TOLABel|VARSET|3277ENC|ALSERV|CHANGE|DISKfast|FILEUPDAt|HFS
Xecute|MACLIB|OPTCDJ|RANDOM|SPEC|STRLITera|TOTARGet|VCHAR|64DECODE|APLDECode|CHOP|DISKID|FILLUP|HLASM|MAPMDISK|OUTPUT|READER|SPECREFE|STRLOCate|
TRACKBLOc|VERIFY|64ENCODE|APLENCode|CKDDEBLO)\\b(\\s*)'
      'name': 'support.function.rexx'
    }
}

'holding-area-repository': {
    'work-in-progress-pipeline-rule': {
        # Only call this within the context of a string (which might be a pipeline invocation)
        # Should be PIPE[LINE] *followed by* an optional (options) then a sequence of stages.
        # Testing revealed: begin= values are tricky, even when only called for ' strings
        # - \\b in front works
        # - ^ in front = no match
        # - ' in front, with optional surrounding whitespace = no match
        'begin': '\\s*[\']\\s*((?i)PIPE(LINE)?)\\b'
        # Testing revealed: end= .* does match "to the end of the enclosing string" as one
        #   might expect.  It pulls in characters past the end of string.
        'end'  : '.*'
        'name': 'support.function.rexx'
        'patterns': {

        }
    }
}


#https://www.sitepoint.com/how-to-write-a-syntax-highlighting-package-for-atom/
#https://manual.macromates.com/en/language_grammars
#http://www.regular-expressions.info/characters.html
